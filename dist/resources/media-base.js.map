{"version":3,"sources":["../../src/resources/media-base.js"],"names":["MediaResource","file","attributes","attrs","formData","FormData","accessKey","hasOwnProperty","uuid","v4","append","resourceName","track","fileOptions","filename","fileName","body","headers","options","optionsForUpload","client","api","post","createAction","version","find","media","versions","includes","Error","join","fetch","then","resp","Resource","List","includeInto","Find","Create"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;IAEqBA,a;;;;;;;;;;yCACFC,I,EAAMC,U,EAAY;AACjC,gBAAMC,QAAQD,cAAc,EAA5B;AACA,gBAAME,WAAW,IAAIC,kBAAJ,EAAjB;;AAEA,gBAAMC,YAAYH,MAAMI,cAAN,CAAqB,WAArB,IAAoCJ,MAAMG,SAA1C,GAAsDE,eAAKC,EAAL,EAAxE;;AAEAL,qBAASM,MAAT,CAAmB,KAAKC,YAAxB,mBAAoDL,SAApD;;AAEA,gBAAIH,MAAMI,cAAN,CAAqB,OAArB,CAAJ,EAAmC;AACjCH,yBAASM,MAAT,CAAmB,KAAKC,YAAxB,cAA+CR,MAAMS,KAArD;AACD;;AAED,gBAAIC,cAAc,IAAlB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAIV,MAAMI,cAAN,CAAqB,UAArB,CAAJ,EAAsC;AACpCM,8BAAc,EAAEC,UAAUX,MAAMY,QAAlB,EAAd;AACD;;AAEDX,qBAASM,MAAT,CAAmB,KAAKC,YAAxB,aAA8CV,IAA9C,EAAoDY,WAApD;;AAEA,mBAAO;AACLG,sBAAMZ,QADD;AAELa,yBAAS;AACP,oCAAgB;AADT;AAFJ,aAAP;AAMD;;;;iHAEYhB,I,EAAMC,U;;;;;;AACXgB,uC,GAAU,KAAKC,gBAAL,CAAsBlB,IAAtB,EAA4BC,UAA5B,C;;uCAEG,KAAKkB,MAAL,CAAYC,GAAZ,CAAgBC,IAAhB,CAAqB,KAAKC,YAA1B,EAAwCL,OAAxC,C;;;AAAbF,oC;iEAECA,KAAK,KAAKL,YAAV,C;;;;;;;;;;;;;;;;;;;mHAGGL,S;oBAAWkB,O,uEAAU,U;;;;;;;uCACX,KAAKC,IAAL,CAAUnB,SAAV,C;;;AAAdoB,qC;;oCAED,KAAKC,QAAL,CAAcC,QAAd,CAAuBJ,OAAvB,C;;;;;sCACG,IAAIK,KAAJ,6BAAoC,KAAKF,QAAL,CAAcG,IAAd,CAAmB,IAAnB,CAApC,O;;;kEAGDC,MAAML,MAAMF,OAAN,CAAN,EACJQ,IADI,CACC;AAAA,2CAAQC,KAAKjB,IAAb;AAAA,iCADD,C;;;;;;;;;;;;;;;;;;EAlDgCkB,c;;kBAAtBlC,a;;;AAuDrBmC,eAAKC,WAAL,CAAiBpC,aAAjB;AACAqC,eAAKD,WAAL,CAAiBpC,aAAjB;AACAsC,iBAAOF,WAAP,CAAmBpC,aAAnB","file":"media-base.js","sourcesContent":["import uuid from 'uuid';\r\nimport FormData from 'form-data';\r\n\r\nimport List from '../actions/list';\r\nimport Find from '../actions/find';\r\nimport Create from '../actions/create';\r\nimport Resource from './base';\r\n\r\nexport default class MediaResource extends Resource {\r\n  optionsForUpload(file, attributes) {\r\n    const attrs = attributes || {};\r\n    const formData = new FormData();\r\n\r\n    const accessKey = attrs.hasOwnProperty('accessKey') ? attrs.accessKey : uuid.v4();\r\n\r\n    formData.append(`${this.resourceName}[access_key]`, accessKey);\r\n\r\n    if (attrs.hasOwnProperty('track')) {\r\n      formData.append(`${this.resourceName}[track]`, attrs.track);\r\n    }\r\n\r\n    let fileOptions = null;\r\n\r\n    // File names from media streams like\r\n    // fs.createReadStream('photo.jpg')\r\n    // are automatically added. When reading from buffers like\r\n    // fs.readFileSync('photo.jpg)\r\n    // the file name can't be inferred so it must be supplied like\r\n    // photos.create(fs.readFileSync('photo.jpg'), {fileName: 'photo.jpg'})\r\n    if (attrs.hasOwnProperty('fileName')) {\r\n      fileOptions = { filename: attrs.fileName };\r\n    }\r\n\r\n    formData.append(`${this.resourceName}[file]`, file, fileOptions);\r\n\r\n    return {\r\n      body: formData,\r\n      headers: {\r\n        'Content-Type': null\r\n      }\r\n    };\r\n  }\r\n\r\n  async create(file, attributes) {\r\n    const options = this.optionsForUpload(file, attributes);\r\n\r\n    const body = await this.client.api.post(this.createAction, options);\r\n\r\n    return body[this.resourceName];\r\n  }\r\n\r\n  async media(accessKey, version = 'original') {\r\n    const media = await this.find(accessKey);\r\n\r\n    if (!this.versions.includes(version)) {\r\n      throw new Error(`Version must be one of ${this.versions.join(', ')}.`);\r\n    }\r\n\r\n    return fetch(media[version])\r\n      .then(resp => resp.body);\r\n  }\r\n}\r\n\r\nList.includeInto(MediaResource);\r\nFind.includeInto(MediaResource);\r\nCreate.includeInto(MediaResource);\r\n"]}