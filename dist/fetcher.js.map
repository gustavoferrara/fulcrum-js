{"version":3,"sources":["../src/fetcher.js"],"names":["getQueryString","params","Object","keys","map","encodeURIComponent","k","join","errorMessageForStatus","status","messages","Fetcher","options","queue","Queue","concurrency","headers","opts","forEach","key","baseURI","hasOwnProperty","body","JSON","stringify","url","fetch","resp","ok","errorMessage","authenticationErrorHandler","Error","contentType","get","split","json","text","add","_fetch","path","qs","_processOptions","assign","method","_queue","func"],"mappings":"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","file":"fetcher.js","sourcesContent":["import 'isomorphic-fetch';\r\nimport Queue from 'p-queue';\r\n\r\nfunction getQueryString(params) {\r\n  return Object.keys(params)\r\n    .map(k => encodeURIComponent(k) + '=' + encodeURIComponent(params[k]))\r\n    .join('&');\r\n}\r\n\r\nfunction errorMessageForStatus(status) {\r\n  const messages = {\r\n    400: 'Bad Request',\r\n    401: 'Unauthorized',\r\n    402: 'Payment Required',\r\n    403: 'Forbidden',\r\n    404: 'Not Found'\r\n  };\r\n\r\n  return messages[status] || `HTTP ${status}`;\r\n}\r\n\r\nexport default class Fetcher {\r\n  constructor(options) {\r\n    this.options = options;\r\n    this.queue = new Queue({concurrency: 3});\r\n    this.headers = options.headers;\r\n  }\r\n\r\n  _processOptions(opts) {\r\n    const options = {\r\n      ...opts,\r\n      headers: {\r\n        ...this.headers,\r\n        ...opts.headers\r\n      }\r\n    };\r\n\r\n    // remove any nil or blank headers\r\n    // (e.g. to automatically set Content-Type with `FormData` boundary)\r\n    Object.keys(options.headers).forEach(key => {\r\n      if (typeof options.headers[key] === 'undefined' ||\r\n          options.headers[key] === null ||\r\n          options.headers[key] === '') {\r\n        delete options.headers[key];\r\n      }\r\n    });\r\n\r\n    delete options.baseURI;\r\n\r\n    if (options && options.hasOwnProperty('body') &&\r\n        options.hasOwnProperty('headers') && options.headers['Content-Type'] === 'application/json') {\r\n      options.body = JSON.stringify(options.body);\r\n    }\r\n\r\n    return options;\r\n  }\r\n\r\n  async _fetch(url, options) {\r\n    const resp = await fetch(url, options);\r\n\r\n    if (!resp.ok) {\r\n      const errorMessage = errorMessageForStatus(resp.status) || 'Unknown Error';\r\n\r\n      if (errorMessage === 'Unauthorized' && this.authenticationErrorHandler) {\r\n        this.authenticationErrorHandler();\r\n      }\r\n\r\n      throw new Error(errorMessage);\r\n    }\r\n\r\n    const contentType = resp.headers.get('Content-Type');\r\n\r\n    if (contentType && contentType.split(';')[0] === 'application/json') {\r\n      return resp.json();\r\n    }\r\n\r\n    return resp.text();\r\n  }\r\n\r\n  _queue(url, options) {\r\n    return this.queue.add(() => this._fetch(url, options));\r\n  }\r\n\r\n  get(path, opts) {\r\n    let url = this.options.baseURI + '/' + path;\r\n\r\n    if (opts && opts.hasOwnProperty('qs')) {\r\n      url += '?' + getQueryString(opts.qs);\r\n      delete opts.qs;\r\n    }\r\n\r\n    const options = this._processOptions(Object.assign({method: 'GET'}, opts));\r\n\r\n    return this._queue(url, options);\r\n  }\r\n\r\n  post(path, opts) {\r\n    const url = this.options.baseURI + '/' + path;\r\n\r\n    const options = this._processOptions(Object.assign({method: 'POST'}, opts));\r\n\r\n    return this._queue(url, options);\r\n  }\r\n\r\n  put(path, opts) {\r\n    const url = this.options.baseURI + '/' + path;\r\n\r\n    const options = this._processOptions(Object.assign({method: 'PUT'}, opts));\r\n\r\n    return this._queue(url, options);\r\n  }\r\n\r\n  del(path, opts) {\r\n    const url = this.options.baseURI + '/' + path;\r\n\r\n    const options = this._processOptions(Object.assign({method: 'DELETE'}, opts));\r\n\r\n    return this._queue(url, options);\r\n  }\r\n\r\n  registerAuthenticationErrorHandler(func) {\r\n    this.authenticationErrorHandler = func;\r\n  }\r\n}\r\n"]}